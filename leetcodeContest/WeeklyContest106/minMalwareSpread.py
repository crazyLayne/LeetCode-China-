class Solution:
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        def DFS(rem, g, collects, p):
            if p not in collects[-1]:
                collects[-1].add(p)
                rem.remove(p)
                for i in range(len(g)):
                    if g[p][i]==1: DFS(rem, g, collects, i)
        rem = list(range(len(graph)))
        collects = []
        while len(rem)>0:
            p = rem[0]
            collects.append(set())
            DFS(rem, graph, collects, p)
        dulp = set()
        d = {}
        for i in initial:
            j = 0
            while i not in collects[j]:j+=1
            if j not in dulp: 
                if j in d.keys():
                    del d[j]
                    dulp.add(j)
                else:
                    d[j] = i
        if len(d)==0: return sorted(initial)[0]
        else:
            maxC = 0
            idC = len(graph)
            for k,v in d.items():
                if len(collects[k])>maxC:
                    maxC, idC = len(collects[k]), v
                elif len(collects[k]) == maxC and v<idC:
                    maxC, idC = len(collects[k]), v
            return idC
            
s = Solution()
g=[[1,0,0,0],[0,1,0,0],[0,0,1,1],[0,0,1,1]]
i=[3,1]
print(s.minMalwareSpread(g,i))

